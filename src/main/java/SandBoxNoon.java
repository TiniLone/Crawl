import liquibase.util.StreamUtil;import org.apache.commons.lang3.StringUtils;import org.apache.http.*;import org.apache.http.auth.AuthScope;import org.apache.http.auth.UsernamePasswordCredentials;import org.apache.http.client.CredentialsProvider;import org.apache.http.client.entity.GzipDecompressingEntity;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.BasicCredentialsProvider;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;import org.apache.http.util.EntityUtils;import org.joda.time.DateTime;import java.io.BufferedWriter;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.net.MalformedURLException;import java.net.URL;public class SandBoxNoon {    private static String entryPoint = "https://www.noon.com/uae-en/";    private static String host;    private static CloseableHttpClient httpClient = createClient();    private final static String PROXY = "188.72.91.202";    private final static int PROXY_PORT = 23334;    private static int tryConn = 0;    private static int nbTry = 0;    private static int stats = 0;    private static int stat200 = 0;    private static int stat429 = 0;    private static int stat403 = 0;    private static DateTime dateTimeInit = DateTime.now();    public static void main(String[] args) throws IOException {        configureHostDomain();        String timeStamp = String.valueOf(dateTimeInit);        timeStamp = StringUtils.substringBefore(timeStamp, ".");        timeStamp = StringUtils.replace(timeStamp, ":", "-");        final BufferedWriter file = new BufferedWriter(new FileWriter("/home/workdev/sandbox/" + host + "_" + timeStamp + ".txt"));        file.write("---------------Begin---------------\n");        file.append(String.valueOf(dateTimeInit));        int status = 0;        while (status == 200 || nbTry <= 10000) {            nbTry++;            System.out.println("\nNumber : " + nbTry + "\n");            Page page = crawlPage(file);            status = page.getStatus();        }        System.out.println("\n----------------Done----------------");        try {            file.append("\n----------------End----------------\n");            file.append(String.valueOf(DateTime.now()));            file.append("\n-------------Statistics------------\n");            file.append("Total : ");            file.append(String.valueOf(stats));            file.append("\n200 : ");            file.append(String.valueOf(stat200));            file.append("\n403 : ");            file.append(String.valueOf(stat403));            file.append("\n429 : ");            file.append(String.valueOf(stat429));            file.close();        } catch (IOException e) {            e.printStackTrace();        }    }    private static Page crawlPage(BufferedWriter file) {        Page page = getConnection(entryPoint);        try {            file.append("\n-----------------------------------\n");            file.append("Date       : ");            file.append(String.valueOf(DateTime.now()));            file.append("\nStatus     : ");            file.append(String.valueOf(page.getStatus()));            file.append("\nRequest headers : \n");            file.append(String.valueOf(page.getRequestHeaders()));            file.append("\nResponse headers : \n");            file.append(String.valueOf(page.getResponseHeaders()));        } catch (IOException e) {            e.printStackTrace();        }        return page;    }    private static void configureHostDomain() {        URL url = null;        try {            url = new URL(entryPoint);        } catch (MalformedURLException e) {            e.printStackTrace();        }        if (url != null) {            host = url.getHost();        }    }    private static CloseableHttpClient createClient() {        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();        HttpHost proxy = new HttpHost(PROXY, PROXY_PORT);        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();        credentialsProvider.setCredentials(                new AuthScope(PROXY, PROXY_PORT),                new UsernamePasswordCredentials("workit", "IZk1tdWL"));        return HttpClients                .custom()                .setConnectionManager(connectionManager)                .setProxy(proxy)                .setDefaultCredentialsProvider(credentialsProvider)                .build();    }    private static Page getConnection(final String url) {        int status;        System.out.println("Connect " + tryConn + " - url : " + url);        Page page = new Page();        ++tryConn;        try {            HttpGet httpGet = getMethod(url);            HttpResponse response = httpClient.execute(httpGet);            HttpEntity entity = response.getEntity();            status = response.getStatusLine().getStatusCode();            page.setStatus(status);            stats++;            final String content = getContent(response, entity);            System.out.println("Connection status : " + status);            page.setContent(content);            if (status == HttpStatus.SC_OK) {                stat200++;            } else if (status == 403) {                stat403++;            } else if (status == 429) {                stat429++;            }            String requestHeaders = getHeadersAsString(httpGet.getAllHeaders());            page.setRequestHeaders(requestHeaders);            String responseHeaders = getHeadersAsString(response.getAllHeaders());            page.setResponseHeaders(responseHeaders);            if (entity != null) {                EntityUtils.consume(entity);            }        } catch (Exception exc) {            System.out.println("Connection parse error [" + url + "] - Exc : " + exc);        }        return page;    }    private static String getHeadersAsString(Header[] headers) {        String allHeader = "";        for (Header header : headers) {            allHeader += StringUtils.isBlank(allHeader) ? "" : ";\n";            allHeader += "\t" + header.getName() + " : " + header.getValue();        }        return allHeader;    }    private static String getContent(HttpResponse response, HttpEntity entity) throws IOException {        Header contentEncodingHeader = response.getFirstHeader("Content-Encoding");        if (contentEncodingHeader != null) {            String encoding = contentEncodingHeader.getValue();            if (encoding.contains("gzip")) {                InputStreamReader reader = new InputStreamReader(new GzipDecompressingEntity(entity).getContent(), "utf-8");                String content = StreamUtil.getReaderContents(reader);                return StringUtils.trim(content);            }        }        return StringUtils.trim(EntityUtils.toString(entity));    }    private static HttpGet getMethod(String url) {        HttpGet httpGet = new HttpGet(url);        httpGet.addHeader("Host", StringUtils.substringBetween(url, "://", "/"));        httpGet.addHeader("Connection", "keep-alive");        httpGet.addHeader("Pragma", "no-cache");        httpGet.addHeader("Cache-Control", "no-cache");        httpGet.addHeader("Upgrade-Insecure-Requests", "1");        httpGet.addHeader("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36");        httpGet.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8");        httpGet.addHeader("Accept-Encoding", "gzip, deflate, br");        httpGet.addHeader("Accept-Language", "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7");        return httpGet;    }    private static class Page {        private int status;        private String content;        private String requestHeaders;        private String responseHeaders;        private Page() {        }        private String getContent() {            return content;        }        private void setContent(String content) {            this.content = content;        }        private int getStatus() {            return status;        }        private void setStatus(int status) {            this.status = status;        }        private String getRequestHeaders() {            return requestHeaders;        }        private void setRequestHeaders(String requestHeaders) {            this.requestHeaders = requestHeaders;        }        private String getResponseHeaders() {            return responseHeaders;        }        private void setResponseHeaders(String responseHeaders) {            this.responseHeaders = responseHeaders;        }    }}