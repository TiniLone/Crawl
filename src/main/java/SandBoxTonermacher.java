import liquibase.util.StreamUtil;import org.apache.commons.lang3.StringUtils;import org.apache.http.*;import org.apache.http.client.entity.GzipDecompressingEntity;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;import org.apache.http.util.EntityUtils;import org.joda.time.DateTime;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import java.io.BufferedWriter;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.net.MalformedURLException;import java.net.URL;import java.util.Timer;import java.util.TimerTask;public class SandBoxTonermacher {    private static String entryPoint = "https://www.tonermacher.de/";    private static String host;    private final static String PROXY = "82.200.44.219";    private final static int PROXY_PORT = 8080;    private static int tryConn = 0;    private static int stats = 0;    private static int stat200 = 0;    private static int stat403 = 0;    private static int stat502 = 0;    private static int stat503 = 0;    private static int stat504 = 0;    private static int statBot = 0;    private static DateTime dateTimeInit = DateTime.now();    private static DateTime dateTimeEnd = DateTime.now().plusMinutes(150);    private static Timer timer = new Timer();    private static boolean isOk = true;    public static void main(String[] args) throws IOException {        configureHostDomain();        createClient();        String timeStamp = String.valueOf(dateTimeInit);        timeStamp = StringUtils.substringBefore(timeStamp, ".");        timeStamp = StringUtils.replace(timeStamp, ":", "-");        final BufferedWriter fichier = new BufferedWriter(new FileWriter("/home/workdev/sandbox/" + host + "_" + timeStamp + ".txt"));        fichier.write("---------------Begin---------------\n");        fichier.append(String.valueOf(dateTimeInit));        TimerTask task = new TimerTask() {            @Override            public void run() {                if (this.scheduledExecutionTime() > dateTimeEnd.getMillis() || !isOk) {                    System.out.println("\n----------------Done----------------");                    if (!isOk) System.out.println("\n-------------with error-------------\n");                    timer.cancel();                    try {                        fichier.append("\n----------------End----------------\n");                        fichier.append(String.valueOf(DateTime.now()));                        fichier.append("\n-------------Statistics------------\n");                        fichier.append("Total : ");                        fichier.append(String.valueOf(stats));                        fichier.append("\nBots : ");                        fichier.append(String.valueOf(statBot));                        fichier.append("\n200 : ");                        fichier.append(String.valueOf(stat200));                        fichier.append("\n403 : ");                        fichier.append(String.valueOf(stat403));                        fichier.append("\n502 : ");                        fichier.append(String.valueOf(stat502));                        fichier.append("\n503 : ");                        fichier.append(String.valueOf(stat503));                        fichier.append("\n504 : ");                        fichier.append(String.valueOf(stat504));                        fichier.close();                    } catch (IOException e) {                        e.printStackTrace();                    }                    return;                }                Page page = getConnection(entryPoint, "type");                int status = page.getStatus();                String content = page.getContent();                if (StringUtils.isNotBlank(content)) {                    Document document = Jsoup.parse(content);                    Element botElement = document.select(".form-style:contains(Ihre Adresse ist gesperrt), h1.main:contains(Ihre Adresse ist gesperrt)").first();                    if (botElement != null) isOk = false;                }                long num = this.scheduledExecutionTime() - dateTimeInit.getMillis();                long den = dateTimeEnd.getMillis() - dateTimeInit.getMillis();                float percent = ((float) num / (float) den) * 100;                percent = Math.round(percent);                System.out.println("% : " + percent);                try {                    fichier.append("\n-----------------------------------\n");                    fichier.append("Date       : ");                    fichier.append(String.valueOf(DateTime.now()));                    fichier.append("\nStatus     : ");                    fichier.append(String.valueOf(status));                    fichier.append("\nisOK       : ");                    fichier.append(String.valueOf(isOk));                    fichier.append("\nRequest headers : \n");                    fichier.append(String.valueOf(page.getRequestHeaders()));                    fichier.append("\nResponse headers : \n");                    fichier.append(String.valueOf(page.getResponseHeaders()));                    if (status != 200 || !isOk) {                        fichier.append("\nContent : \n");                        fichier.append(String.valueOf(page.getContent()));                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        };        System.out.println("------------Start Timer-----------\n");        timer.scheduleAtFixedRate(task, 0, 3000);    }    private static void configureHostDomain() {        URL url = null;        try {            url = new URL(entryPoint);        } catch (MalformedURLException e) {            e.printStackTrace();        }        if (url != null) {            host = url.getHost();        }    }    private static CloseableHttpClient createClient() {        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();        HttpHost proxy = new HttpHost(PROXY, PROXY_PORT);        return HttpClients                .custom()//                .setConnectionManager(connectionManager)                .setProxy(proxy)                .build();    }    private static Page getConnection(final String url, final String type) {        int status;        System.out.println("Connect " + tryConn + " on " + type + " url : " + url);//        String pageUrl = url;        Page page = new Page();//        while (status != HttpStatus.SC_OK && tryConn < 5) {        ++tryConn;        try {            CloseableHttpClient httpClient = createClient();            HttpGet httpGet = getMethod(entryPoint);            HttpResponse response = httpClient.execute(httpGet);            HttpEntity entity = response.getEntity();            status = response.getStatusLine().getStatusCode();            page.setStatus(status);            stats++;            final String content = getContent(response, entity);            System.out.println("Connection status : " + status);            page.setContent(content);            Document document = Jsoup.parse(content);            Element botElement = document.select(".form-style:contains(Ihre Adresse ist gesperrt), h1.main:contains(Ihre Adresse ist gesperrt)").first();            if (botElement != null) statBot++;            if (status == HttpStatus.SC_OK) {                stat200++;            } else if (status == 403) {                stat403++;            } else if (status == 502) {                stat502++;            } else if (status == 503) {                stat503++;            } else if (status == 504) {                stat504++;            }            String requestHeaders = getHeadersAsString(httpGet.getAllHeaders());            page.setRequestHeaders(requestHeaders);            String responseHeaders = getHeadersAsString(response.getAllHeaders());            page.setResponseHeaders(responseHeaders);            if (entity != null) {                EntityUtils.consume(entity);            }        } catch (Exception exc) {            System.out.println("Connection parse error [" + url + "] - Exc : " + exc);        }//        }        return page;    }    private static String getHeadersAsString(Header[] headers) {        String allHeader = "";        for (Header header : headers) {            allHeader += StringUtils.isBlank(allHeader) ? "" : ";\n";            allHeader += "\t" + header.getName() + " : " + header.getValue();        }        return allHeader;    }    private static String getContent(HttpResponse response, HttpEntity entity) throws IOException {        Header contentEncodingHeader = response.getFirstHeader("Content-Encoding");        if (contentEncodingHeader != null) {            String encoding = contentEncodingHeader.getValue();            if (encoding.contains("gzip")) {                InputStreamReader reader = new InputStreamReader(new GzipDecompressingEntity(entity).getContent(), "utf-8");                String content = StreamUtil.getReaderContents(reader);                return StringUtils.trim(content);            }        }        return StringUtils.trim(EntityUtils.toString(entity));    }    private static HttpGet getMethod(String url) {        HttpGet httpGet = new HttpGet(url);        httpGet.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");        httpGet.addHeader("Accept-Encoding", "gzip, deflate");        httpGet.addHeader("Accept-Language", "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4");        httpGet.addHeader("Connection", "keep-alive");        httpGet.addHeader("Cache-Control", "no-cache");        httpGet.addHeader("Host", host);//        httpGet.addHeader("Referer", "");        httpGet.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36");        return httpGet;    }    private static class Page {        private int status;        private String content;        private String requestHeaders;        private String responseHeaders;        private Page() {        }        private String getContent() {            return content;        }        private void setContent(String content) {            this.content = content;        }        private int getStatus() {            return status;        }        private void setStatus(int status) {            this.status = status;        }        private String getRequestHeaders() {            return requestHeaders;        }        private void setRequestHeaders(String requestHeaders) {            this.requestHeaders = requestHeaders;        }        private String getResponseHeaders() {            return responseHeaders;        }        private void setResponseHeaders(String responseHeaders) {            this.responseHeaders = responseHeaders;        }    }}